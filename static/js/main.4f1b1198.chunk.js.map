{"version":3,"sources":["context.js","TodoItem.js","TodoList.js","reducer.js","App.js","serviceWorker.js","index.js"],"names":["Context","React","createContext","TodoItem","_ref","title","id","completed","dispatch","useContext","cls","push","react_default","a","createElement","className","join","type","checked","onChange","payload","onClick","TodoList","todos","map","item","Object","assign","key","reducer","state","action","concat","toConsumableArray","Date","now","todo","filter","App","_useReducer","useReducer","JSON","parse","localStorage","getItem","_useReducer2","slicedToArray","_useState","useState","_useState2","todoTitle","setTodoTitle","useEffect","setItem","stringify","Provider","value","event","target","onKeyPress","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"wKAEaA,EAAUC,IAAMC,gBCCd,SAASC,EAATC,GAA4C,IAAxBC,EAAwBD,EAAxBC,MAAOC,EAAiBF,EAAjBE,GAAIC,EAAaH,EAAbG,UACpCC,EAAaC,qBAAWT,GAAxBQ,SAEFE,EAAM,CAAC,QAMb,OAJIH,GACFG,EAAIC,KAAK,aAITC,EAAAC,EAAAC,cAAA,MAAIC,UAAWL,EAAIM,KAAK,MACtBJ,EAAAC,EAAAC,cAAA,aACEF,EAAAC,EAAAC,cAAA,SACEG,KAAK,WACLC,QAASX,EACTY,SAAU,kBACRX,EAAS,CACPS,KAAM,SACNG,QAASd,OAIfM,EAAAC,EAAAC,cAAA,YAAOT,GAEPO,EAAAC,EAAAC,cAAA,KACEC,UAAU,0BACVM,QAAS,kBACPb,EAAS,CACPS,KAAM,SACNG,QAASd,MALf,YCxBO,SAASgB,EAATlB,GAA6B,IAATmB,EAASnB,EAATmB,MACjC,OACEX,EAAAC,EAAAC,cAAA,UACGS,EAAMC,IAAI,SAACC,GAAD,OACTb,EAAAC,EAAAC,cAACX,EAADuB,OAAAC,OAAA,CAAUC,IAAKH,EAAKnB,IAAQmB,kBCPrBI,EAAA,SAAUC,EAAOC,GAC9B,OAAQA,EAAOd,MACb,IAAK,MACH,SAAAe,OAAAN,OAAAO,EAAA,EAAAP,CACKI,GADL,CAEE,CACExB,GAAI4B,KAAKC,MACT9B,MAAO0B,EAAOX,QACdb,WAAW,KAGjB,IAAK,SACH,OAAOuB,EAAMN,IAAI,SAACY,GAIhB,OAHIA,EAAK9B,KAAOyB,EAAOX,UACrBgB,EAAK7B,WAAa6B,EAAK7B,WAElB6B,IAEX,IAAK,SACH,OAAON,EAAMO,OAAO,SAACD,GAAD,OAAUA,EAAK9B,KAAOyB,EAAOX,UACnD,QACE,OAAOU,IChBE,SAASQ,IAAM,IAAAC,EACFC,qBACxBX,EACAY,KAAKC,MAAMC,aAAaC,QAAQ,WAHNC,EAAAnB,OAAAoB,EAAA,EAAApB,CAAAa,EAAA,GACrBT,EADqBe,EAAA,GACdrC,EADcqC,EAAA,GAAAE,EAKMC,mBAAS,IALfC,EAAAvB,OAAAoB,EAAA,EAAApB,CAAAqB,EAAA,GAKrBG,EALqBD,EAAA,GAKVE,EALUF,EAAA,GAO5BG,oBAAU,WACRT,aAAaU,QAAQ,QAASZ,KAAKa,UAAUxB,KAC5C,CAACA,IAYJ,OACElB,EAAAC,EAAAC,cAACd,EAAQuD,SAAT,CACEC,MAAO,CACLhD,aAGFI,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACbH,EAAAC,EAAAC,cAAA,sBACAF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,eACbH,EAAAC,EAAAC,cAAA,SACEG,KAAK,OACLuC,MAAON,EACP/B,SAAU,SAACsC,GAAD,OAAWN,EAAaM,EAAMC,OAAOF,QAC/CG,WAvBM,SAACF,GACG,UAAdA,EAAM7B,MACRpB,EAAS,CACPS,KAAM,MACNG,QAAS8B,IAEXC,EAAa,QAmBTvC,EAAAC,EAAAC,cAAA,2BAEFF,EAAAC,EAAAC,cAACQ,EAAD,CAAUC,MAAOO,YC/BL8B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OAAOtD,EAAAC,EAAAC,cAACwB,EAAD,MAAS6B,SAASC,eAAe,SD0H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.4f1b1198.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nexport const Context = React.createContext();\r\n\r\n// export const Context = createContext();\r\n","import React, { useContext } from \"react\";\nimport { Context } from \"./context\";\n\nexport default function TodoItem({ title, id, completed }) {\n  const { dispatch } = useContext(Context);\n\n  const cls = [\"todo\"];\n\n  if (completed) {\n    cls.push(\"completed\");\n  }\n\n  return (\n    <li className={cls.join(\" \")}>\n      <label>\n        <input\n          type=\"checkbox\"\n          checked={completed}\n          onChange={() =>\n            dispatch({\n              type: \"toggle\",\n              payload: id,\n            })\n          }\n        />\n        <span>{title}</span>\n\n        <i\n          className=\"material-icons red-text\"\n          onClick={() =>\n            dispatch({\n              type: \"remove\",\n              payload: id,\n            })\n          }\n        >\n          delete\n        </i>\n      </label>\n    </li>\n  );\n}\n","import React from \"react\";\nimport TodoItem from \"./TodoItem\";\n\nexport default function TodoList({ todos }) {\n  return (\n    <ul>\n      {todos.map((item) => (\n        <TodoItem key={item.id} {...item} />\n      ))}\n    </ul>\n  );\n}\n","export default function (state, action) {\r\n  switch (action.type) {\r\n    case \"add\":\r\n      return [\r\n        ...state,\r\n        {\r\n          id: Date.now(),\r\n          title: action.payload,\r\n          completed: false,\r\n        },\r\n      ];\r\n    case \"toggle\":\r\n      return state.map((todo) => {\r\n        if (todo.id === action.payload) {\r\n          todo.completed = !todo.completed;\r\n        }\r\n        return todo;\r\n      });\r\n    case \"remove\":\r\n      return state.filter((todo) => todo.id !== action.payload);\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n","import React, { useState, useEffect, useReducer } from \"react\";\nimport TodoList from \"./TodoList\";\nimport { Context } from \"./context\";\nimport reducer from \"./reducer\";\n\nexport default function App() {\n  const [state, dispatch] = useReducer(\n    reducer,\n    JSON.parse(localStorage.getItem(\"todos\"))\n  );\n  const [todoTitle, setTodoTitle] = useState(\"\");\n\n  useEffect(() => {\n    localStorage.setItem(\"todos\", JSON.stringify(state));\n  }, [state]);\n\n  const addTodo = (event) => {\n    if (event.key === \"Enter\") {\n      dispatch({\n        type: \"add\",\n        payload: todoTitle,\n      });\n      setTodoTitle(\"\");\n    }\n  };\n\n  return (\n    <Context.Provider\n      value={{\n        dispatch,\n      }}\n    >\n      <div className=\"container\">\n        <h1>Todo app</h1>\n        <div className=\"input-field\">\n          <input\n            type=\"text\"\n            value={todoTitle}\n            onChange={(event) => setTodoTitle(event.target.value)}\n            onKeyPress={addTodo}\n          />\n          <label>Todo name</label>\n        </div>\n        <TodoList todos={state} />\n      </div>\n    </Context.Provider>\n  );\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport 'materialize-css'\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}